import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from bonchapi import BonchAPI  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞—à API
import sqlite3
from contextlib import closing
from dotenv import load_dotenv
from datetime import datetime, time
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
import pytz
import os
import sys
from aiogram.types import BotCommand

logging.getLogger('aiogram').setLevel(logging.DEBUG)
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)

load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN')
conn = sqlite3.connect('users.db', check_same_thread=False)
cursor = conn.cursor()

with closing(sqlite3.connect('users.db')) as db:
    db.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            email TEXT NOT NULL,
            password TEXT NOT NULL
        )
    ''')
    db.commit()

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

api = BonchAPI()
controller = None

class LessonController:
    def __init__(self, api):
        self.api = api
        self.is_running = False
        self.task = None

        # –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø–∞—Ä (–Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü)
        self.lesson_intervals = [
            (time(9, 0), time(10, 35)),   # 1 –ø–∞—Ä–∞
            (time(10, 45), time(12, 20)),  # 2 –ø–∞—Ä–∞
            (time(13, 0), time(14, 35)),   # 3 –ø–∞—Ä–∞
            (time(14, 45), time(16, 20)),  # 4 –ø–∞—Ä–∞
            (time(16, 30), time(18, 5)),   # 5 –ø–∞—Ä–∞
            (time(18, 15), time(19, 50)), # 6 –ø–∞—Ä–∞
            (time(20, 0), time(21, 35))   # 7 –ø–∞—Ä–∞
        ]

    def is_time_between(self, start_time, end_time, now_time):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ."""
        if start_time <= end_time:
            return start_time <= now_time <= end_time
        else:  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å
            return start_time <= now_time or now_time <= end_time

    def is_lesson_time(self, now_time):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ –ª—é–±–æ–π –∏–∑ –ø–∞—Ä."""
        for start_time, end_time in self.lesson_intervals:
            if self.is_time_between(start_time, end_time, now_time):
                return True
        return False

    async def start_lesson(self):
        if self.is_running:
            return "–ê–≤—Ç–æ–∫–ª–∏–∫–∞–ª–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞."

        self.is_running = True
        moscow_tz = pytz.timezone('Europe/Moscow')

        while self.is_running:
            try:
                now = datetime.now(moscow_tz).time()
                if self.is_lesson_time(now):
                    await self.api.click_start_lesson()
                    logging.info("–ö–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω.")
                else:
                    logging.info("–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –ø–∞—Ä. –ö–ª–∏–∫ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω.")
                await asyncio.sleep(60)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–ª–∏–∫–∞: {e}", exc_info=True)
                await asyncio.sleep(60)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                continue  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏

        return "–ê–≤—Ç–æ–∫–ª–∏–∫–∞–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞."

    async def stop_lesson(self):
        if not self.is_running:
            return "–ê–≤—Ç–æ–∫–ª–∏–∫–∞–ª–∫–∞ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞."

        self.is_running = False
        if self.task:
            self.task.cancel()
        return "–ê–≤—Ç–æ–∫–ª–∏–∫–∞–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞."

    async def get_status(self):
        return "–ê–≤—Ç–æ–∫–ª–∏–∫–∞–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞." if self.is_running else "–ê–≤—Ç–æ–∫–ª–∏–∫–∞–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞."

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç —á—Ç–æ —Ç–æ —Ç–∏–ø–æ –º–æ–µ–π –≤–∞—Ä–∏–∞—Ü–∏–∏ BonchBot."
    )

@dp.message(Command("start_lesson"))
async def cmd_start_lesson(message: types.Message):
    global controller
    if not controller:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /login.")
        return

    if controller.is_running:
        await message.answer("–ê–≤—Ç–æ–∫–ª–∏–∫–∞–ª–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞.")
        return

    controller.task = asyncio.create_task(controller.start_lesson())
    await message.answer("–ê–≤—Ç–æ–∫–ª–∏–∫–∞–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞.")

@dp.message(Command("stop_lesson"))
async def cmd_stop_lesson(message: types.Message):
    global controller
    if not controller:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /login.")
        return

    if not controller.is_running:
        await message.answer("–ê–≤—Ç–æ–∫–ª–∏–∫–∞–ª–∫–∞ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        return

    await controller.stop_lesson()
    await message.answer("–ê–≤—Ç–æ–∫–ª–∏–∫–∞–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")


@dp.message(Command("status"))
async def cmd_status(message: types.Message):
    global controller
    if not controller:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /login.")
        return

    status = await controller.get_status()
    await message.answer(status)


@dp.message(Command("login"))
async def cmd_login(message: types.Message):
    global controller
    try:
        args = message.text.split()
        if len(args) != 3:
            await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /login <email> <password>")
            return

        email, password = args[1], args[2]
        user_id = message.from_user.id

        cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
        existing_user = cursor.fetchone()

        if existing_user:
            cursor.execute('''
                UPDATE users 
                SET email = ?, password = ? 
                WHERE user_id = ?
            ''', (email, password, user_id))
        else:
            cursor.execute('INSERT INTO users (user_id, email, password) VALUES (?, ?, ?)', (user_id, email, password))

        conn.commit()
        
        await api.login(email, password)
        controller = LessonController(api)
        await message.answer("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")

    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")

# –î–æ–±–∞–≤–∏–º –∫–æ–º–∞–Ω–¥—É /my_account –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
@dp.message(Command("my_account"))
async def cmd_my_account(message: types.Message):
    user_id = message.from_user.id
    cursor.execute('SELECT email FROM users WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    if result:
        await message.answer(f"–í–∞—à —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π email: {result[0]}")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.")


def format_timetable(timetable) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç–∏–π –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç.
    :param timetable: –°–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç–∏–π.
    :return: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º.
    """
    formatted_timetable = "üìÖ –í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n\n"
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–Ω—è—Ç–∏—è –ø–æ –¥–Ω—è–º
    days = {}
    for lesson in timetable:
        date = lesson.date
        if date not in days:
            days[date] = []
        days[date].append(lesson)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏ –ø–æ –¥–∞—Ç–µ
    sorted_days = sorted(days.items(), key=lambda x: datetime.strptime(x[0], "%Y-%m-%d"))
    
    for date, lessons in sorted_days:
        formatted_timetable += f"----------------------\nüìå *{date} ({lessons[0].day})*\n"
        for lesson in lessons:
            formatted_timetable += (
                f"‚è∞ *{lesson.time}* \n"
                f"üìö {lesson.subject} \n"
                f"üéì {lesson.teacher} \n"
                f"üè´ {lesson.location} \n"
                f"üîπ –¢–∏–ø: {lesson.lesson_type}\n\n"
            )
    
    return formatted_timetable

def get_week_navigation_buttons(week_offset: int = 0) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –Ω–µ–¥–µ–ª—è–º.
    :param week_offset: –¢–µ–∫—É—â–µ–µ —Å–º–µ—â–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏.
    :return: InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏.
    """
    buttons = [
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è –Ω–µ–¥–µ–ª—è", callback_data=f"prev_week_{week_offset - 1}"),
            InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è ‚û°Ô∏è", callback_data=f"next_week_{week_offset + 1}"),
        ],
        [
            InlineKeyboardButton(text="–≠—Ç–∞ –Ω–µ–¥–µ–ª—è", callback_data="current_week_0"),
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


@dp.callback_query(F.data.startswith("prev_week_") | F.data.startswith("next_week_") | F.data.startswith("current_week_"))
async def process_week_navigation(callback_query: CallbackQuery):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏ –∏–∑ callback_data
    callback_data = callback_query.data
    if callback_data.startswith("prev_week_"):
        week_offset = int(callback_data.split("_")[2])
    elif callback_data.startswith("next_week_"):
        week_offset = int(callback_data.split("_")[2])
    elif callback_data.startswith("current_week_"):
        week_offset = 0


    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –Ω–µ–¥–µ–ª–∏
        timetable = await api.get_timetable(week_offset=week_offset)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        formatted_timetable = format_timetable(timetable)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
        reply_markup = get_week_navigation_buttons(week_offset=week_offset)
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
        await callback_query.message.edit_text(formatted_timetable, parse_mode="Markdown", reply_markup=reply_markup)
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback
        await callback_query.answer()
    
    except Exception as e:
        await callback_query.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)
# –î–æ–±–∞–≤–∏–º –∫–æ–º–∞–Ω–¥—É /timetable –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@dp.message(Command("timetable"))
async def cmd_timetable(message: types.Message):
    global controller
    if not controller:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /login.")
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
        timetable = await api.get_timetable(week_offset=0)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        formatted_timetable = format_timetable(timetable)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
        reply_markup = get_week_navigation_buttons(week_offset=0)
        
        await message.answer(formatted_timetable, parse_mode="Markdown", reply_markup=reply_markup)
    
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")

async def auto_login_user(user_id):
    global controller
    cursor.execute('SELECT email, password FROM users WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    if result:
        email, password = result
        try:
            await api.login(email, password)
            controller = LessonController(api)
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

async def auto_start_lesson(user_id):
    global controller
    if controller and not controller.is_running:
        controller.task = asyncio.create_task(controller.start_lesson())
        logging.info("–ê–≤—Ç–æ–∫–ª–∏–∫–∞–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.")
        
        
async def set_bot_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="start_lesson", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–∫–ª–∏–∫–∞–ª–∫—É"),
        BotCommand(command="stop_lesson", description="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–∫–ª–∏–∫–∞–ª–∫—É"),
        BotCommand(command="status", description="–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–∫–ª–∏–∫–∞–ª–∫–∏"),
        BotCommand(command="login", description="–í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç"),
        BotCommand(command="my_account", description="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"),
        BotCommand(command="timetable", description="–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    ]
    await bot.set_my_commands(commands)
    
    
async def on_startup(dp):
    await set_bot_commands(bot)
    # –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º –∏—Ö
    cursor.execute('SELECT user_id FROM users')
    users = cursor.fetchall()
    for user in users:
        user_id = user[0]
        await auto_login_user(user_id)
        await auto_start_lesson(user_id)  # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–∫–∞–ª–∫—É –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

async def main():
    await on_startup(dp)
    await dp.start_polling(bot)
    logging.info("–≠—Ç–æ—Ç –ª–æ–≥ –¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å—Å—è")

if __name__ == "__main__":
    asyncio.run(main())